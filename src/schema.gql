# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ImageModel {
  order: Int!
  link: String!
}

type CommentaryModel {
  id: ID!
  text: String
  images: [ImageModel!]!
  userId: Int!
  postId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PostModel {
  id: ID!
  title: String!
  description: String
  images: [ImageModel!]!
  tags: [String!]!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: UserModel!
  commentaries(sort: Sort = CREATEDAT, order: Order = DESC, limit: Int = 15, page: Int = 1, route: String, countQueries: Boolean): PaginatedCommentary!
}

enum Sort {
  CREATEDAT
  LIKES
}

enum Order {
  ASC
  DESC
}

type UserModel {
  id: ID!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts(limit: Int = 15, page: Int = 1, route: String, countQueries: Boolean): PaginatedPost!
}

type PaginatedCommentary {
  items: [CommentaryModel!]!
  meta: MetaType!
  links: LinksType!
}

type MetaType {
  totalItems: Int!
  itemCount: Int!
  itemsPerPage: Int!
  totalPages: Int!
  currentPage: Int!
}

type LinksType {
  first: String!
  previous: String!
  next: String!
  last: String!
}

type PaginatedPost {
  items: [PostModel!]!
  meta: MetaType!
  links: LinksType!
}

type AuthResponse {
  user: UserModel!
  accessToken: String!
}

type PostReactionModel {
  id: ID!
  reaction: Reaction!
  userId: Int!
  postId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Reaction {
  LIKE
  DISLIKE
}

type CommentaryReactionModel {
  id: ID!
  reaction: Reaction!
  userId: Int!
  commentaryId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  getUsers: [UserModel!]!
  getPosts(limit: Int = 15, page: Int = 1, route: String, countQueries: Boolean, searchValue: String): PaginatedPost!
  login(loginUserArgs: CreateUserInput!): AuthResponse!
}

input CreateUserInput {
  """"""
  email: String!
  password: String!
}

type Mutation {
  updateUser(updateUserArgs: UpdateUserInput!): UserModel!
  deleteUser: UserModel!
  createNewPost(newPostArgs: CreatePostInput!): PostModel!
  updatePost(updatePostInput: UpdatePostInput!): PostModel!
  deletePost(postId: Float!): PostModel!
  createCommentary(CreateCommentaryInput: CreateCommentaryInput!): CommentaryModel!
  updateCommentary(updateCommentaryInput: UpdateCommentaryInput!): CommentaryModel!
  deleteCommentary(id: Int!): CommentaryModel!
  registrateNewUser(newUserArgs: CreateUserInput!): AuthResponse!
  createPostReaction(createPostReactionInput: CreatePostReactionInput!): PostReactionModel!
  updatePostReaction(updatePostReactionInput: UpdatePostReactionInput!): PostReactionModel!
  deletePostReaction(id: Int!): PostReactionModel!
  createCommentaryReaction(createCommentaryReactionInput: CreateCommentaryReactionInput!): CommentaryReactionModel!
  updateCommentaryReaction(updateCommentaryReactionInput: UpdateCommentaryReactionInput!): CommentaryReactionModel!
  deleteCommentaryReaction(id: Int!): CommentaryReactionModel!
}

input UpdateUserInput {
  """"""
  email: String
  password: String
}

input CreatePostInput {
  title: String!
  description: String
  images: [ImageInput!]
  tags: [String!]
}

input ImageInput {
  order: Int!
  link: String!
}

input UpdatePostInput {
  title: String
  description: String
  images: [ImageInput!]
  tags: [String!]
  postId: Int!
}

input CreateCommentaryInput {
  text: String
  images: [ImageInput!] = []
  postId: Int!
}

input UpdateCommentaryInput {
  text: String
  images: [ImageInput!] = []
  id: Int!
}

input CreatePostReactionInput {
  reaction: Reaction!
  postId: Int!
}

input UpdatePostReactionInput {
  reaction: Reaction
  id: Int!
}

input CreateCommentaryReactionInput {
  reaction: Reaction!
  commentaryId: Int!
}

input UpdateCommentaryReactionInput {
  reaction: Reaction
  commentaryReactionId: Int!
}